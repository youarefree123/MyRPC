// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pingpong.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pingpong_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pingpong_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pingpong_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pingpong_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pingpong_2eproto;
namespace mrpc {
class EchoRequst;
class EchoRequstDefaultTypeInternal;
extern EchoRequstDefaultTypeInternal _EchoRequst_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
class HelloRequst;
class HelloRequstDefaultTypeInternal;
extern HelloRequstDefaultTypeInternal _HelloRequst_default_instance_;
class HelloResponse;
class HelloResponseDefaultTypeInternal;
extern HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace mrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::mrpc::EchoRequst* Arena::CreateMaybeMessage<::mrpc::EchoRequst>(Arena*);
template<> ::mrpc::EchoResponse* Arena::CreateMaybeMessage<::mrpc::EchoResponse>(Arena*);
template<> ::mrpc::HelloRequst* Arena::CreateMaybeMessage<::mrpc::HelloRequst>(Arena*);
template<> ::mrpc::HelloResponse* Arena::CreateMaybeMessage<::mrpc::HelloResponse>(Arena*);
template<> ::mrpc::ResultCode* Arena::CreateMaybeMessage<::mrpc::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mrpc {

// ===================================================================

class ResultCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {};
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pingpong_2eproto);
    return ::descriptor_table_pingpong_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // bytes err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  void set_err_msg(const std::string& value);
  void set_err_msg(std::string&& value);
  void set_err_msg(const char* value);
  void set_err_msg(const void* value, size_t size);
  std::string* mutable_err_msg();
  std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_err_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_err_msg(
      std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::int32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mrpc.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pingpong_2eproto;
};
// -------------------------------------------------------------------

class EchoRequst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.EchoRequst) */ {
 public:
  inline EchoRequst() : EchoRequst(nullptr) {};
  virtual ~EchoRequst();

  EchoRequst(const EchoRequst& from);
  EchoRequst(EchoRequst&& from) noexcept
    : EchoRequst() {
    *this = ::std::move(from);
  }

  inline EchoRequst& operator=(const EchoRequst& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequst& operator=(EchoRequst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequst* internal_default_instance() {
    return reinterpret_cast<const EchoRequst*>(
               &_EchoRequst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoRequst& a, EchoRequst& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequst* New() const final {
    return CreateMaybeMessage<EchoRequst>(nullptr);
  }

  EchoRequst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequst& from);
  void MergeFrom(const EchoRequst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.EchoRequst";
  }
  protected:
  explicit EchoRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pingpong_2eproto);
    return ::descriptor_table_pingpong_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:mrpc.EchoRequst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pingpong_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {};
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.EchoResponse";
  }
  protected:
  explicit EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pingpong_2eproto);
    return ::descriptor_table_pingpong_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoMsgFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // bytes echo_msg = 2;
  void clear_echo_msg();
  const std::string& echo_msg() const;
  void set_echo_msg(const std::string& value);
  void set_echo_msg(std::string&& value);
  void set_echo_msg(const char* value);
  void set_echo_msg(const void* value, size_t size);
  std::string* mutable_echo_msg();
  std::string* release_echo_msg();
  void set_allocated_echo_msg(std::string* echo_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_echo_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_echo_msg(
      std::string* echo_msg);
  private:
  const std::string& _internal_echo_msg() const;
  void _internal_set_echo_msg(const std::string& value);
  std::string* _internal_mutable_echo_msg();
  public:

  // .mrpc.ResultCode result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  const ::mrpc::ResultCode& result_code() const;
  ::mrpc::ResultCode* release_result_code();
  ::mrpc::ResultCode* mutable_result_code();
  void set_allocated_result_code(::mrpc::ResultCode* result_code);
  private:
  const ::mrpc::ResultCode& _internal_result_code() const;
  ::mrpc::ResultCode* _internal_mutable_result_code();
  public:
  void unsafe_arena_set_allocated_result_code(
      ::mrpc::ResultCode* result_code);
  ::mrpc::ResultCode* unsafe_arena_release_result_code();

  // @@protoc_insertion_point(class_scope:mrpc.EchoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_msg_;
  ::mrpc::ResultCode* result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pingpong_2eproto;
};
// -------------------------------------------------------------------

class HelloRequst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.HelloRequst) */ {
 public:
  inline HelloRequst() : HelloRequst(nullptr) {};
  virtual ~HelloRequst();

  HelloRequst(const HelloRequst& from);
  HelloRequst(HelloRequst&& from) noexcept
    : HelloRequst() {
    *this = ::std::move(from);
  }

  inline HelloRequst& operator=(const HelloRequst& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequst& operator=(HelloRequst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloRequst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRequst* internal_default_instance() {
    return reinterpret_cast<const HelloRequst*>(
               &_HelloRequst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloRequst& a, HelloRequst& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloRequst* New() const final {
    return CreateMaybeMessage<HelloRequst>(nullptr);
  }

  HelloRequst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloRequst& from);
  void MergeFrom(const HelloRequst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.HelloRequst";
  }
  protected:
  explicit HelloRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pingpong_2eproto);
    return ::descriptor_table_pingpong_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mrpc.HelloRequst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pingpong_2eproto;
};
// -------------------------------------------------------------------

class HelloResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrpc.HelloResponse) */ {
 public:
  inline HelloResponse() : HelloResponse(nullptr) {};
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);
  HelloResponse(HelloResponse&& from) noexcept
    : HelloResponse() {
    *this = ::std::move(from);
  }

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloResponse& operator=(HelloResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloResponse* internal_default_instance() {
    return reinterpret_cast<const HelloResponse*>(
               &_HelloResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HelloResponse& a, HelloResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloResponse* New() const final {
    return CreateMaybeMessage<HelloResponse>(nullptr);
  }

  HelloResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrpc.HelloResponse";
  }
  protected:
  explicit HelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pingpong_2eproto);
    return ::descriptor_table_pingpong_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHelloMsgFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // bytes hello_msg = 2;
  void clear_hello_msg();
  const std::string& hello_msg() const;
  void set_hello_msg(const std::string& value);
  void set_hello_msg(std::string&& value);
  void set_hello_msg(const char* value);
  void set_hello_msg(const void* value, size_t size);
  std::string* mutable_hello_msg();
  std::string* release_hello_msg();
  void set_allocated_hello_msg(std::string* hello_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hello_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hello_msg(
      std::string* hello_msg);
  private:
  const std::string& _internal_hello_msg() const;
  void _internal_set_hello_msg(const std::string& value);
  std::string* _internal_mutable_hello_msg();
  public:

  // .mrpc.ResultCode result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  const ::mrpc::ResultCode& result_code() const;
  ::mrpc::ResultCode* release_result_code();
  ::mrpc::ResultCode* mutable_result_code();
  void set_allocated_result_code(::mrpc::ResultCode* result_code);
  private:
  const ::mrpc::ResultCode& _internal_result_code() const;
  ::mrpc::ResultCode* _internal_mutable_result_code();
  public:
  void unsafe_arena_set_allocated_result_code(
      ::mrpc::ResultCode* result_code);
  ::mrpc::ResultCode* unsafe_arena_release_result_code();

  // @@protoc_insertion_point(class_scope:mrpc.HelloResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hello_msg_;
  ::mrpc::ResultCode* result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pingpong_2eproto;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mrpc::EchoRequst* request,
                       ::mrpc::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Hello(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mrpc::HelloRequst* request,
                       ::mrpc::HelloResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mrpc::EchoRequst* request,
                       ::mrpc::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void Hello(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mrpc::HelloRequst* request,
                       ::mrpc::HelloResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 err_code = 1;
inline void ResultCode::clear_err_code() {
  err_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::err_code() const {
  // @@protoc_insertion_point(field_get:mrpc.ResultCode.err_code)
  return _internal_err_code();
}
inline void ResultCode::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_code_ = value;
}
inline void ResultCode::set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:mrpc.ResultCode.err_code)
}

// bytes err_msg = 2;
inline void ResultCode::clear_err_msg() {
  err_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultCode::err_msg() const {
  // @@protoc_insertion_point(field_get:mrpc.ResultCode.err_msg)
  return _internal_err_msg();
}
inline void ResultCode::set_err_msg(const std::string& value) {
  _internal_set_err_msg(value);
  // @@protoc_insertion_point(field_set:mrpc.ResultCode.err_msg)
}
inline std::string* ResultCode::mutable_err_msg() {
  // @@protoc_insertion_point(field_mutable:mrpc.ResultCode.err_msg)
  return _internal_mutable_err_msg();
}
inline const std::string& ResultCode::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void ResultCode::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultCode::set_err_msg(std::string&& value) {
  
  err_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.ResultCode.err_msg)
}
inline void ResultCode::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.ResultCode.err_msg)
}
inline void ResultCode::set_err_msg(const void* value,
    size_t size) {
  
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.ResultCode.err_msg)
}
inline std::string* ResultCode::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultCode::release_err_msg() {
  // @@protoc_insertion_point(field_release:mrpc.ResultCode.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultCode::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.ResultCode.err_msg)
}
inline std::string* ResultCode::unsafe_arena_release_err_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.ResultCode.err_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return err_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultCode::unsafe_arena_set_allocated_err_msg(
    std::string* err_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      err_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.ResultCode.err_msg)
}

// -------------------------------------------------------------------

// EchoRequst

// bytes msg = 1;
inline void EchoRequst::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoRequst::msg() const {
  // @@protoc_insertion_point(field_get:mrpc.EchoRequst.msg)
  return _internal_msg();
}
inline void EchoRequst::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:mrpc.EchoRequst.msg)
}
inline std::string* EchoRequst::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:mrpc.EchoRequst.msg)
  return _internal_mutable_msg();
}
inline const std::string& EchoRequst::_internal_msg() const {
  return msg_.Get();
}
inline void EchoRequst::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoRequst::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.EchoRequst.msg)
}
inline void EchoRequst::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.EchoRequst.msg)
}
inline void EchoRequst::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.EchoRequst.msg)
}
inline std::string* EchoRequst::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoRequst::release_msg() {
  // @@protoc_insertion_point(field_release:mrpc.EchoRequst.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoRequst::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.EchoRequst.msg)
}
inline std::string* EchoRequst::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.EchoRequst.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoRequst::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.EchoRequst.msg)
}

// -------------------------------------------------------------------

// EchoResponse

// .mrpc.ResultCode result_code = 1;
inline bool EchoResponse::_internal_has_result_code() const {
  return this != internal_default_instance() && result_code_ != nullptr;
}
inline bool EchoResponse::has_result_code() const {
  return _internal_has_result_code();
}
inline void EchoResponse::clear_result_code() {
  if (GetArena() == nullptr && result_code_ != nullptr) {
    delete result_code_;
  }
  result_code_ = nullptr;
}
inline const ::mrpc::ResultCode& EchoResponse::_internal_result_code() const {
  const ::mrpc::ResultCode* p = result_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mrpc::ResultCode*>(
      &::mrpc::_ResultCode_default_instance_);
}
inline const ::mrpc::ResultCode& EchoResponse::result_code() const {
  // @@protoc_insertion_point(field_get:mrpc.EchoResponse.result_code)
  return _internal_result_code();
}
inline void EchoResponse::unsafe_arena_set_allocated_result_code(
    ::mrpc::ResultCode* result_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_code_);
  }
  result_code_ = result_code;
  if (result_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.EchoResponse.result_code)
}
inline ::mrpc::ResultCode* EchoResponse::release_result_code() {
  auto temp = unsafe_arena_release_result_code();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mrpc::ResultCode* EchoResponse::unsafe_arena_release_result_code() {
  // @@protoc_insertion_point(field_release:mrpc.EchoResponse.result_code)
  
  ::mrpc::ResultCode* temp = result_code_;
  result_code_ = nullptr;
  return temp;
}
inline ::mrpc::ResultCode* EchoResponse::_internal_mutable_result_code() {
  
  if (result_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mrpc::ResultCode>(GetArena());
    result_code_ = p;
  }
  return result_code_;
}
inline ::mrpc::ResultCode* EchoResponse::mutable_result_code() {
  // @@protoc_insertion_point(field_mutable:mrpc.EchoResponse.result_code)
  return _internal_mutable_result_code();
}
inline void EchoResponse::set_allocated_result_code(::mrpc::ResultCode* result_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_code_;
  }
  if (result_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_code);
    if (message_arena != submessage_arena) {
      result_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_code, submessage_arena);
    }
    
  } else {
    
  }
  result_code_ = result_code;
  // @@protoc_insertion_point(field_set_allocated:mrpc.EchoResponse.result_code)
}

// bytes echo_msg = 2;
inline void EchoResponse::clear_echo_msg() {
  echo_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoResponse::echo_msg() const {
  // @@protoc_insertion_point(field_get:mrpc.EchoResponse.echo_msg)
  return _internal_echo_msg();
}
inline void EchoResponse::set_echo_msg(const std::string& value) {
  _internal_set_echo_msg(value);
  // @@protoc_insertion_point(field_set:mrpc.EchoResponse.echo_msg)
}
inline std::string* EchoResponse::mutable_echo_msg() {
  // @@protoc_insertion_point(field_mutable:mrpc.EchoResponse.echo_msg)
  return _internal_mutable_echo_msg();
}
inline const std::string& EchoResponse::_internal_echo_msg() const {
  return echo_msg_.Get();
}
inline void EchoResponse::_internal_set_echo_msg(const std::string& value) {
  
  echo_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoResponse::set_echo_msg(std::string&& value) {
  
  echo_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.EchoResponse.echo_msg)
}
inline void EchoResponse::set_echo_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  echo_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.EchoResponse.echo_msg)
}
inline void EchoResponse::set_echo_msg(const void* value,
    size_t size) {
  
  echo_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.EchoResponse.echo_msg)
}
inline std::string* EchoResponse::_internal_mutable_echo_msg() {
  
  return echo_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoResponse::release_echo_msg() {
  // @@protoc_insertion_point(field_release:mrpc.EchoResponse.echo_msg)
  return echo_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoResponse::set_allocated_echo_msg(std::string* echo_msg) {
  if (echo_msg != nullptr) {
    
  } else {
    
  }
  echo_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echo_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.EchoResponse.echo_msg)
}
inline std::string* EchoResponse::unsafe_arena_release_echo_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.EchoResponse.echo_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return echo_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoResponse::unsafe_arena_set_allocated_echo_msg(
    std::string* echo_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (echo_msg != nullptr) {
    
  } else {
    
  }
  echo_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      echo_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.EchoResponse.echo_msg)
}

// -------------------------------------------------------------------

// HelloRequst

// bytes name = 1;
inline void HelloRequst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloRequst::name() const {
  // @@protoc_insertion_point(field_get:mrpc.HelloRequst.name)
  return _internal_name();
}
inline void HelloRequst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mrpc.HelloRequst.name)
}
inline std::string* HelloRequst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mrpc.HelloRequst.name)
  return _internal_mutable_name();
}
inline const std::string& HelloRequst::_internal_name() const {
  return name_.Get();
}
inline void HelloRequst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloRequst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.HelloRequst.name)
}
inline void HelloRequst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.HelloRequst.name)
}
inline void HelloRequst::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.HelloRequst.name)
}
inline std::string* HelloRequst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloRequst::release_name() {
  // @@protoc_insertion_point(field_release:mrpc.HelloRequst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloRequst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.HelloRequst.name)
}
inline std::string* HelloRequst::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.HelloRequst.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HelloRequst::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.HelloRequst.name)
}

// -------------------------------------------------------------------

// HelloResponse

// .mrpc.ResultCode result_code = 1;
inline bool HelloResponse::_internal_has_result_code() const {
  return this != internal_default_instance() && result_code_ != nullptr;
}
inline bool HelloResponse::has_result_code() const {
  return _internal_has_result_code();
}
inline void HelloResponse::clear_result_code() {
  if (GetArena() == nullptr && result_code_ != nullptr) {
    delete result_code_;
  }
  result_code_ = nullptr;
}
inline const ::mrpc::ResultCode& HelloResponse::_internal_result_code() const {
  const ::mrpc::ResultCode* p = result_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mrpc::ResultCode*>(
      &::mrpc::_ResultCode_default_instance_);
}
inline const ::mrpc::ResultCode& HelloResponse::result_code() const {
  // @@protoc_insertion_point(field_get:mrpc.HelloResponse.result_code)
  return _internal_result_code();
}
inline void HelloResponse::unsafe_arena_set_allocated_result_code(
    ::mrpc::ResultCode* result_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_code_);
  }
  result_code_ = result_code;
  if (result_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.HelloResponse.result_code)
}
inline ::mrpc::ResultCode* HelloResponse::release_result_code() {
  auto temp = unsafe_arena_release_result_code();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mrpc::ResultCode* HelloResponse::unsafe_arena_release_result_code() {
  // @@protoc_insertion_point(field_release:mrpc.HelloResponse.result_code)
  
  ::mrpc::ResultCode* temp = result_code_;
  result_code_ = nullptr;
  return temp;
}
inline ::mrpc::ResultCode* HelloResponse::_internal_mutable_result_code() {
  
  if (result_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mrpc::ResultCode>(GetArena());
    result_code_ = p;
  }
  return result_code_;
}
inline ::mrpc::ResultCode* HelloResponse::mutable_result_code() {
  // @@protoc_insertion_point(field_mutable:mrpc.HelloResponse.result_code)
  return _internal_mutable_result_code();
}
inline void HelloResponse::set_allocated_result_code(::mrpc::ResultCode* result_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_code_;
  }
  if (result_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_code);
    if (message_arena != submessage_arena) {
      result_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_code, submessage_arena);
    }
    
  } else {
    
  }
  result_code_ = result_code;
  // @@protoc_insertion_point(field_set_allocated:mrpc.HelloResponse.result_code)
}

// bytes hello_msg = 2;
inline void HelloResponse::clear_hello_msg() {
  hello_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloResponse::hello_msg() const {
  // @@protoc_insertion_point(field_get:mrpc.HelloResponse.hello_msg)
  return _internal_hello_msg();
}
inline void HelloResponse::set_hello_msg(const std::string& value) {
  _internal_set_hello_msg(value);
  // @@protoc_insertion_point(field_set:mrpc.HelloResponse.hello_msg)
}
inline std::string* HelloResponse::mutable_hello_msg() {
  // @@protoc_insertion_point(field_mutable:mrpc.HelloResponse.hello_msg)
  return _internal_mutable_hello_msg();
}
inline const std::string& HelloResponse::_internal_hello_msg() const {
  return hello_msg_.Get();
}
inline void HelloResponse::_internal_set_hello_msg(const std::string& value) {
  
  hello_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloResponse::set_hello_msg(std::string&& value) {
  
  hello_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mrpc.HelloResponse.hello_msg)
}
inline void HelloResponse::set_hello_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hello_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mrpc.HelloResponse.hello_msg)
}
inline void HelloResponse::set_hello_msg(const void* value,
    size_t size) {
  
  hello_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mrpc.HelloResponse.hello_msg)
}
inline std::string* HelloResponse::_internal_mutable_hello_msg() {
  
  return hello_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloResponse::release_hello_msg() {
  // @@protoc_insertion_point(field_release:mrpc.HelloResponse.hello_msg)
  return hello_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloResponse::set_allocated_hello_msg(std::string* hello_msg) {
  if (hello_msg != nullptr) {
    
  } else {
    
  }
  hello_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hello_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mrpc.HelloResponse.hello_msg)
}
inline std::string* HelloResponse::unsafe_arena_release_hello_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mrpc.HelloResponse.hello_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hello_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HelloResponse::unsafe_arena_set_allocated_hello_msg(
    std::string* hello_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hello_msg != nullptr) {
    
  } else {
    
  }
  hello_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hello_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mrpc.HelloResponse.hello_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pingpong_2eproto
